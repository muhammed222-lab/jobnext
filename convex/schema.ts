import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    fullName: v.string(),
    email: v.string(),
    passwordHash: v.string(),
    isAdmin: v.boolean(),
    createdAt: v.number(),
  }).index("email", ["email"]),
  jobs: defineTable({
    title: v.string(),
    description: v.string(),
    location: v.string(),
    salaryRange: v.string(),
    imageUrl: v.string(),
    createdBy: v.string(),
    createdAt: v.number(),
  }),
  applications: defineTable({
    jobId: v.string(),
    userId: v.string(),
    fullName: v.optional(v.string()),
    email: v.optional(v.string()),
    resumeUrl: v.string(),
    coverLetter: v.string(),
    createdAt: v.number(),
    dob: v.optional(v.string()),
    gender: v.optional(v.string()),
    maritalStatus: v.optional(v.string()),
    nationality: v.optional(v.string()),
    phone: v.optional(v.string()),
    address: v.optional(v.string()),
    nextOfKin: v.optional(v.string()),
    emergencyContact: v.optional(v.string()),
    nationalId: v.optional(v.string()),
    passport: v.optional(v.string()),
    tin: v.optional(v.string()),
    ssn: v.optional(v.string()),
    workPermit: v.optional(v.string()),
    jobTitle: v.optional(v.string()),
    department: v.optional(v.string()),
    employeeId: v.optional(v.string()),
    joiningDate: v.optional(v.string()),
    employmentType: v.optional(v.string()),
    workLocation: v.optional(v.string()),
    supervisor: v.optional(v.string()),
    education: v.optional(v.string()),
    certifications: v.optional(v.string()),
    previousEmployment: v.optional(v.string()),
    skills: v.optional(v.string()),
    bankName: v.optional(v.string()),
    bankAccount: v.optional(v.string()),
    bankAccountName: v.optional(v.string()),
    paymentMethod: v.optional(v.string()),
    salary: v.optional(v.string()),
    pensionAccount: v.optional(v.string()),
    taxId: v.optional(v.string()),
    pensionScheme: v.optional(v.string()),
    healthInsurance: v.optional(v.string()),
    otherContributions: v.optional(v.string()),
    contractAccepted: v.optional(v.boolean()),
    offerAccepted: v.optional(v.boolean()),
    ndaAccepted: v.optional(v.boolean()),
    handbookAccepted: v.optional(v.boolean()),
    workTools: v.optional(v.string()),
  }).index("userId", ["userId"]),
  messages: defineTable({
    jobId: v.string(),
    senderId: v.string(),
    receiverId: v.string(),
    content: v.string(),
    createdAt: v.number(),
  }),
});
